// Code generated by go-bindata.
// sources:
// static/config.json
// static/css/docs.css
// static/template.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4f\x6a\xf3\x30\x10\xc5\xd7\xf6\x29\x06\x61\xc8\x26\xf8\x00\xd9\x85\xd8\xf0\x05\xbe\xfc\x21\x55\x0f\xa0\xca\x93\x58\xad\x2d\x09\x69\x4c\x0a\x21\x77\x2f\x63\xd5\x34\x49\x03\xdd\x49\xf3\xe6\x3d\xff\x9e\x75\xc9\x33\xe1\x3b\xa5\xb1\x75\x5d\x83\x41\x2c\xe0\x92\x67\x99\xd0\xce\x12\x5a\x12\x0b\x10\x45\xb1\xda\x6d\x65\xbd\x95\x45\x21\xe6\xac\x91\xa1\x0e\x93\x22\xd7\xf2\x7f\x3d\xcd\xd5\x40\xad\x0b\x49\x58\xbe\xca\x7f\xbb\xc3\xa4\x34\x18\x75\x30\x9e\x8c\xb3\x49\xae\xea\x97\xd5\x61\xbd\x97\xeb\xdd\xb6\x28\x44\x9e\x5d\xe7\x39\x6f\x1d\xd5\xd0\xd1\x84\x60\xac\x1f\x46\x80\x43\xbd\xac\x36\x75\xd9\x37\x29\xcc\x2b\x6a\x79\x1c\x30\xf2\xf6\x3d\x52\xe5\x74\x7c\xa4\xd9\x07\xf7\x8e\x9a\x60\x99\x26\xcf\x88\x2a\xa7\x87\x1e\x2d\x29\x1e\x80\x3b\x82\xb2\xa0\xce\x18\x5d\x8f\xe0\x93\xbd\x9c\x30\x5b\xec\xfc\x2f\x46\xd9\x22\x8c\x17\xd8\xa8\xf0\xd1\xb8\xb3\x85\xa3\xe9\x10\xc8\xc1\xdb\x18\xa1\x31\x46\x6c\xca\xfb\x0a\xec\xe2\x33\xaf\xe1\xa7\x77\x81\x80\x5a\x84\xd4\xcc\xd8\xd3\x98\x11\xcb\x87\x8e\x92\x0f\x0c\xc9\xbb\xcd\x1d\xb9\x57\x27\x2c\x1f\xfb\xa7\xde\x93\xe1\xbb\x0e\x7f\x72\x7c\x77\x30\x76\x9c\xcf\x92\x61\x06\x3d\x92\x02\x52\xa7\xf2\xf9\x9f\xfa\xb9\xfe\x99\x78\x63\xbd\x8d\xcd\xb3\x6b\x7e\xfd\x0a\x00\x00\xff\xff\x35\x9b\x3e\xfd\x78\x02\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 632, mode: os.FileMode(420), modTime: time.Unix(1504554452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cssDocsCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xd1\x6e\x83\x30\x0c\x7c\xe7\x2b\x2c\xf5\xa1\x2f\x63\xa2\x1d\x65\x95\xfb\x35\x01\x1c\x88\x46\x63\x14\xdc\xb5\xdb\xb4\x7f\x9f\x68\x52\x04\x08\x75\x5a\xd7\x3e\xdd\x89\xf8\x7c\x67\xfb\xb9\x60\x2b\xca\x58\x72\xf0\x15\x01\x00\x1c\x95\xab\x8c\x8d\x85\x5b\x84\x74\xdf\x5e\x0e\xd1\x77\x14\x69\x66\x19\xbe\x68\xb9\x33\x62\xd8\x22\x38\x6a\x94\x98\x77\x3a\x78\x5e\x95\xa5\xb1\x15\xc2\x36\x6d\x2f\x90\x78\x52\xe8\x22\xb1\x6a\x4c\x65\x11\x0a\xb2\x42\xce\xf3\x9a\xad\xc4\x67\x32\x55\x2d\x08\x9b\x24\x19\xcb\xa8\x20\x74\x7d\x5b\x52\xc1\x4e\x79\x3d\xcb\x36\x68\x15\xdc\xb0\x43\x30\xb6\x26\x67\x64\xa1\x64\x3a\x29\x89\x98\x93\x66\x47\xa1\x70\xef\x99\xac\x20\xac\xd7\x87\x99\x25\x95\x77\xdc\x9c\x24\xc8\x9c\x4d\x29\x35\xc2\x66\x97\xf4\x41\xf4\x4c\x7d\x6b\xf9\x46\xe4\xaa\x78\xab\x1c\x9f\x6c\x89\xb0\x2a\xae\xbf\xe0\xbc\x4f\x30\xa4\xd0\x90\x96\x01\x38\x5f\x21\x20\x9f\x37\x82\x3a\x09\x5f\x3b\x1e\x4d\xa4\xde\x3e\x4d\xe0\xcb\x14\xa6\x53\xb8\x9b\xc2\xec\xce\xb8\xe6\x32\xa8\xb4\x90\x9b\x89\x2d\x91\xe9\x12\xb9\x5b\x22\x33\x4f\x3e\x9a\xf8\xd6\xd1\xf1\xa1\xc4\xb3\xe1\x61\xce\x22\x7c\x5c\x9e\xc1\xdd\xd4\x37\xa8\x8d\xeb\x24\x66\x1d\xcb\x47\x4b\xf8\x3f\x27\x8f\xec\xce\xbd\xd6\xff\xb0\x3e\x33\x23\xe3\xb3\xfa\xed\x24\x5f\x93\x64\xc4\x76\xe6\x93\x10\xf6\x43\xb4\xe1\xfc\x56\x69\xd6\xff\xe7\x39\x8c\xf6\xec\x27\x00\x00\xff\xff\xf3\xd7\x6a\x1a\x5f\x04\x00\x00")

func cssDocsCssBytes() ([]byte, error) {
	return bindataRead(
		_cssDocsCss,
		"css/docs.css",
	)
}

func cssDocsCss() (*asset, error) {
	bytes, err := cssDocsCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/docs.css", size: 1119, mode: os.FileMode(420), modTime: time.Unix(1504559192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x4f\x1b\x3d\x10\xbe\xe7\x57\xf8\xb5\x7c\x78\x2b\x81\x0d\xa8\x87\x7e\x78\x57\x6a\x21\x08\x24\x94\x20\xba\x1c\x7a\x9c\xd8\x93\xd8\x89\xd7\x8e\xec\xd9\x04\xfe\x7d\xb5\xd9\x10\x42\x39\x55\xed\x5e\xac\xe7\xd9\x79\x3e\x56\xe3\xd5\xff\x5d\x4d\x2f\x9b\x9f\xf7\x63\xe6\xa8\x0d\xf5\x48\xf7\x07\x0b\x10\x17\x15\xc7\xc8\xeb\xd1\x48\x3b\x04\x5b\x8f\x18\x63\x4c\xb7\x48\xc0\x8c\x83\x5c\x90\x2a\xfe\xd8\x5c\x9f\x7e\xe2\xfb\x57\xe4\x29\x60\x2d\x44\x73\xdb\xdc\x8d\x85\xd0\x6a\x20\x8e\x74\x11\x5a\xac\xb8\xc5\x62\xb2\x5f\x93\x4f\x91\x33\x93\x22\x61\xa4\x8a\x0b\x71\x35\xfe\x71\xf9\x70\x7b\xdf\xdc\x4e\x27\x42\xf0\xf7\x3a\xe8\xc8\xa5\xfc\x46\xf2\xed\xb1\xb9\x99\x3e\xec\xa6\xdf\x8d\x6f\x3c\x6e\xd7\x29\xd3\x91\x60\xeb\x2d\xb9\xca\xe2\xc6\x1b\x3c\xdd\x81\x13\xe6\xa3\x27\x0f\xe1\xb4\x18\x08\x58\x9d\xcb\xb3\x13\xd6\xc2\x93\x6f\xbb\xf6\x98\xea\x0a\xe6\x1d\x86\x59\xc0\x2a\xa6\x97\x7a\xc1\xc7\x15\xcb\x18\x2a\x5e\xe8\x39\x60\x71\x88\xc4\x99\xcb\x38\xaf\xb8\x23\x5a\x97\x2f\x4a\x19\x1b\x97\x45\x9a\x90\x3a\x3b\x0f\x90\x51\x9a\xd4\x2a\x58\xc2\x93\x0a\x7e\x56\x54\x59\x61\x40\x4a\x51\x5d\xc8\x33\xf9\xf1\x00\x65\xeb\xa3\x34\xa5\xfc\xc3\x24\xe7\x17\x2e\xf8\x85\x23\xb9\x2c\xea\xb3\x3c\xbf\x90\x67\x6a\x30\x53\x16\xe7\xd0\x05\xfa\x93\x50\x53\x8a\xb2\xc9\x94\xe3\xf9\x61\xb1\xac\x64\xf3\x57\xa5\x5e\xb9\xbe\xcf\xb2\xf0\x5a\xab\xc1\xfa\x4d\xce\x00\xfa\xc7\x85\x65\x91\xfd\x26\x6f\x5e\x94\x3e\x2e\xa6\xf1\x2e\x81\xfd\xff\xc3\xd7\x41\x73\x70\xd0\x6a\xb8\xcf\x23\x3d\x4b\xf6\x79\xef\x68\xfd\x86\x99\x00\xa5\x54\xbc\xbf\x2e\xe0\x23\x66\xfe\x1a\x20\xc4\xe5\x74\xd2\x8c\x27\x8d\x10\x07\x4e\xcf\x53\x22\xcc\xf5\xf7\xce\x07\x62\x5b\x4f\x8e\x69\xf8\x6d\x23\x0b\x4f\xae\x9b\xed\x3e\x79\x05\x19\x56\x10\x67\x6a\x9e\x21\xae\x78\x7d\xdd\x1f\x5a\x41\x2d\xb5\xda\x3b\xed\x8b\x5a\xbf\xe9\x5b\x0e\xed\xfa\xba\xfd\x7f\xf9\x2b\x00\x00\xff\xff\x81\x99\x36\xe6\xa7\x03\x00\x00")

func templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateHtml,
		"template.html",
	)
}

func templateHtml() (*asset, error) {
	bytes, err := templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.html", size: 935, mode: os.FileMode(420), modTime: time.Unix(1504559185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
	"css/docs.css": cssDocsCss,
	"template.html": templateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
	"css": &bintree{nil, map[string]*bintree{
		"docs.css": &bintree{cssDocsCss, map[string]*bintree{}},
	}},
	"template.html": &bintree{templateHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

