// Code generated by go-bindata.
// sources:
// static/config.json
// static/css/docs.css
// static/template.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4f\x6a\xf3\x30\x10\xc5\xd7\xf6\x29\x06\x61\xc8\x26\xf8\x00\xd9\x85\xd8\xf0\x05\xbe\xfc\x21\x55\x0f\xa0\xca\x93\x58\xad\x2d\x09\x69\x4c\x0a\x21\x77\x2f\x63\xd5\x34\x49\x03\xdd\x49\xf3\xe6\x3d\xff\x9e\x75\xc9\x33\xe1\x3b\xa5\xb1\x75\x5d\x83\x41\x2c\xe0\x92\x67\x99\xd0\xce\x12\x5a\x12\x0b\x10\x45\xb1\xda\x6d\x65\xbd\x95\x45\x21\xe6\xac\x91\xa1\x0e\x93\x22\xd7\xf2\x7f\x3d\xcd\xd5\x40\xad\x0b\x49\x58\xbe\xca\x7f\xbb\xc3\xa4\x34\x18\x75\x30\x9e\x8c\xb3\x49\xae\xea\x97\xd5\x61\xbd\x97\xeb\xdd\xb6\x28\x44\x9e\x5d\xe7\x39\x6f\x1d\xd5\xd0\xd1\x84\x60\xac\x1f\x46\x80\x43\xbd\xac\x36\x75\xd9\x37\x29\xcc\x2b\x6a\x79\x1c\x30\xf2\xf6\x3d\x52\xe5\x74\x7c\xa4\xd9\x07\xf7\x8e\x9a\x60\x99\x26\xcf\x88\x2a\xa7\x87\x1e\x2d\x29\x1e\x80\x3b\x82\xb2\xa0\xce\x18\x5d\x8f\xe0\x93\xbd\x9c\x30\x5b\xec\xfc\x2f\x46\xd9\x22\x8c\x17\xd8\xa8\xf0\xd1\xb8\xb3\x85\xa3\xe9\x10\xc8\xc1\xdb\x18\xa1\x31\x46\x6c\xca\xfb\x0a\xec\xe2\x33\xaf\xe1\xa7\x77\x81\x80\x5a\x84\xd4\xcc\xd8\xd3\x98\x11\xcb\x87\x8e\x92\x0f\x0c\xc9\xbb\xcd\x1d\xb9\x57\x27\x2c\x1f\xfb\xa7\xde\x93\xe1\xbb\x0e\x7f\x72\x7c\x77\x30\x76\x9c\xcf\x92\x61\x06\x3d\x92\x02\x52\xa7\xf2\xf9\x9f\xfa\xb9\xfe\x99\x78\x63\xbd\x8d\xcd\xb3\x6b\x7e\xfd\x0a\x00\x00\xff\xff\x35\x9b\x3e\xfd\x78\x02\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 632, mode: os.FileMode(420), modTime: time.Unix(1504554452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cssDocsCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xd1\x6e\xab\x30\x0c\x7d\xe7\x2b\x2c\xf5\xa1\x2f\x97\xab\xb6\x97\x72\x2b\xf7\x6b\x02\x18\x88\x46\x63\x14\xdc\xb5\xdb\xb4\x7f\x9f\x42\x02\x02\x84\x3a\xad\x4b\x9e\xce\x51\xe2\x63\x1f\xdb\x7f\x73\x36\xa2\xb4\x21\x0b\x1f\x11\x00\xc0\x45\xd9\x4a\x9b\x58\xb8\x45\x48\x4e\xed\xfd\x1c\x7d\x46\x51\xc9\x2c\xe3\x8b\x96\x3b\x2d\x9a\x0d\x82\xa5\x46\x89\x7e\xa5\xb3\xe7\x55\x51\x68\x53\x21\x1c\x92\xf6\x0e\x3b\x4f\x0a\xdd\x25\x56\x8d\xae\x0c\x42\x4e\x46\xc8\x7a\xbe\x64\x23\xf1\x8d\x74\x55\x0b\xc2\x7e\x17\x5e\xe7\xdc\xb0\x45\xd8\xa4\xca\xdd\xa9\xb4\x0a\xe2\x7d\xbc\x82\x72\xb6\xca\xe7\x60\xd8\xd0\xec\xb3\x36\x35\x59\x2d\x2b\x32\x89\x93\x19\x43\x22\x66\x54\xb2\xa5\x10\xd8\xf9\x40\x46\x10\xb6\xdb\xf3\xa2\x4c\x95\x75\xdc\x5c\x25\xc8\xdc\x74\x21\x35\xc2\xfe\xb8\x73\xe6\x38\xa6\x1e\xca\x18\x88\x4c\xe5\x2f\x95\xe5\xab\x29\x10\x36\x79\x7f\x82\x1b\xce\xd5\x50\x6b\x43\xa5\x8c\xc0\xfa\x08\x01\xf9\x1e\x20\xa8\xab\x70\x9f\xf1\xa4\x4b\xf5\xe1\xcf\x0c\xfe\x9b\xc3\x64\x0e\x8f\x73\x98\x3e\x68\xe1\x52\x06\x55\x29\x64\x17\x62\x6b\x64\xb2\x46\x1e\xd7\xc8\xd4\x93\xcf\x3a\x7e\xb0\x74\x79\xca\xf1\x74\xfc\x98\xb1\x08\x5f\xd6\x7b\xf0\xd0\xf5\x3d\x96\xda\x76\x12\x73\x19\xcb\x5b\x4b\xf8\xbb\x4a\x9e\x99\x9d\x47\xa9\xff\x60\x7c\x16\x85\x4c\xd7\xea\xbb\x35\xfd\x3f\xac\x69\xcf\x76\xfa\x9d\x10\x4e\xa3\xb5\xc3\xee\x26\xa9\xbb\x4b\x1f\x26\x73\xf6\x15\x00\x00\xff\xff\x51\x6f\x1e\xdc\x73\x04\x00\x00")

func cssDocsCssBytes() ([]byte, error) {
	return bindataRead(
		_cssDocsCss,
		"css/docs.css",
	)
}

func cssDocsCss() (*asset, error) {
	bytes, err := cssDocsCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/docs.css", size: 1139, mode: os.FileMode(420), modTime: time.Unix(1504563721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x41\x4f\x1b\x3d\x10\xbd\xe7\x57\xf8\xb3\x2c\xf4\x55\x02\x1b\x50\x0f\x6d\xf1\xae\xd4\x42\x10\x48\x88\x20\xba\x1c\x7a\xaa\x26\xf6\x64\xed\xc4\x6b\x23\x7b\x36\xc0\xbf\xaf\x36\x1b\x20\x94\x53\xd5\xee\x65\xf5\x9e\xe7\xcd\x9b\xa7\xb1\xf5\x7f\x67\xb3\xd3\xe6\xc7\xcd\x94\x39\xea\x42\x3d\xd1\xc3\x8f\x05\x88\x6d\xc5\x31\xf2\x7a\x32\xd1\x0e\xc1\xd6\x13\xc6\x18\xd3\x1d\x12\x30\xe3\x20\x17\xa4\x8a\xdf\x35\xe7\x07\x9f\xf8\xf6\x88\x3c\x05\xac\x85\x68\x2e\x9b\xab\xa9\x10\x5a\x8d\xc4\x8e\x2e\x42\x87\x15\xb7\x58\x4c\xf6\xf7\xe4\x53\xe4\xcc\xa4\x48\x18\xa9\xe2\x42\x9c\x4d\xbf\x9f\xde\x5e\xde\x34\x97\xb3\x6b\x21\xf8\x7b\x1d\xf4\xe4\x52\x7e\x23\xf9\x7a\xd7\x5c\xcc\x6e\x37\xd5\xef\xca\xd7\x1e\x1f\xee\x53\xa6\x1d\xc1\x83\xb7\xe4\x2a\x8b\x6b\x6f\xf0\x60\x03\xf6\x99\x8f\x9e\x3c\x84\x83\x62\x20\x60\x75\x24\x0f\xf7\x59\x07\x8f\xbe\xeb\xbb\x5d\xaa\x2f\x98\x37\x18\xe6\x01\xab\x98\x9e\xc7\x0b\x3e\xae\x58\xc6\x50\xf1\x42\x4f\x01\x8b\x43\x24\xce\x5c\xc6\x45\xc5\x1d\xd1\x7d\xf9\xa2\x94\xb1\x71\x59\xa4\x09\xa9\xb7\x8b\x00\x19\xa5\x49\x9d\x82\x25\x3c\xaa\xe0\xe7\x45\x95\x15\x06\xa4\x14\xd5\xb1\x3c\x94\x1f\x5f\xa0\xec\x7c\x94\xa6\x94\x7f\xe8\xe4\x7c\xeb\x82\x6f\x1d\xc9\x65\x51\x9f\xe5\xd1\xb1\x3c\x54\x63\x33\x65\x71\x01\x7d\xa0\x3f\x31\x35\xa5\x28\x9b\x4c\xd9\xad\x1f\x17\xcb\x4a\x36\x7f\x35\xd4\x2b\x37\xcc\xb3\x2c\xbc\xd6\x6a\x6c\xfd\xc6\x67\x04\xc3\xe7\xc2\xb2\xc8\x61\x93\x17\xcf\x4a\x1f\xdb\x59\xbc\x4a\x60\xff\xff\x70\x32\x6a\x5e\x3a\x68\x35\xde\xe7\x89\x9e\x27\xfb\xb4\xed\x68\xfd\x9a\x99\x00\xa5\x54\x7c\xb8\x2e\xe0\x23\x66\xfe\x6a\x20\xc4\xe9\xec\xba\x99\x5e\x37\x42\xbc\x70\x7a\x91\x12\x61\xae\xbf\xf5\x3e\x10\x7b\xf0\xe4\xd8\x9e\x43\xc8\x54\x4e\xd8\x1e\xd3\xf0\xdb\x72\x5a\x4f\xae\x9f\x6f\xd2\xaf\x20\xc3\x0a\xe2\x5c\x2d\x32\xc4\x15\x67\x04\xb9\x1d\x9e\xd3\xcf\x79\x18\x70\x7d\x3e\xd0\x5a\x41\x2d\xb5\xda\x9a\x6c\x33\x58\xbf\x1e\x02\x8c\x83\x0f\x49\x86\x27\xfb\x2b\x00\x00\xff\xff\x35\xe1\x3f\x56\xc2\x03\x00\x00")

func templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateHtml,
		"template.html",
	)
}

func templateHtml() (*asset, error) {
	bytes, err := templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.html", size: 962, mode: os.FileMode(420), modTime: time.Unix(1504563635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
	"css/docs.css": cssDocsCss,
	"template.html": templateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
	"css": &bintree{nil, map[string]*bintree{
		"docs.css": &bintree{cssDocsCss, map[string]*bintree{}},
	}},
	"template.html": &bintree{templateHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

